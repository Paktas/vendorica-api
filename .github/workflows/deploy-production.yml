name: Deploy to Cloudways Production

on:
  push:
    branches: [main]
  workflow_dispatch: # Manual trigger

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies and build
        run: |
          npm ci
          npm run build
          
      - name: Debug GitHub Secrets
        run: |
          echo "=== GITHUB SECRETS DEBUG ==="
          echo "Host: ${{ secrets.CLOUDWAYS_HOST }}"
          echo "Username: ${{ secrets.CLOUDWAYS_USER }}"
          echo "Port: ${{ secrets.CLOUDWAYS_PORT }}"
          echo "SSH Key length: ${#CLOUDWAYS_SSH_KEY}"
          echo "SSH Key starts with: ${CLOUDWAYS_SSH_KEY:0:50}..."
          
          # Check for each secret
          if [ -z "${{ secrets.CLOUDWAYS_HOST }}" ]; then
            echo "❌ CLOUDWAYS_HOST secret is not set!"
          else
            echo "✅ CLOUDWAYS_HOST is set (${#HOST_VALUE} chars)"
            echo "Host ends with: ...${HOST_VALUE: -8}"
          fi
          
          if [ -z "${{ secrets.CLOUDWAYS_USER }}" ]; then
            echo "❌ CLOUDWAYS_USER secret is not set!"
          else
            echo "✅ CLOUDWAYS_USER is set (${#USER_VALUE} chars)"
            echo "Username ends with: ...${USER_VALUE: -8}"
          fi
          
          if [ -z "${{ secrets.CLOUDWAYS_SSH_KEY }}" ]; then
            echo "❌ CLOUDWAYS_SSH_KEY secret is not set!"
          else
            echo "✅ CLOUDWAYS_SSH_KEY is set (${#CLOUDWAYS_SSH_KEY} chars)"
            
            # Check if SSH key is base64 encoded
            if echo "${CLOUDWAYS_SSH_KEY}" | grep -q "^-----BEGIN"; then
              echo "✅ SSH key format looks correct (starts with -----BEGIN)"
            else
              echo "⚠️ SSH key might be base64 encoded or incorrect format"
              echo "First 30 chars: ${CLOUDWAYS_SSH_KEY:0:30}"
              
              # Try to decode and check
              if echo "${CLOUDWAYS_SSH_KEY}" | base64 -d 2>/dev/null | grep -q "^-----BEGIN"; then
                echo "❌ SSH key IS base64 encoded! It should be plain text."
                echo "The key should start with: -----BEGIN RSA PRIVATE KEY-----"
              fi
            fi
          fi
          
          if [ -z "${{ secrets.CLOUDWAYS_PORT }}" ]; then
            echo "❌ CLOUDWAYS_PORT secret is not set!"
          else
            echo "✅ CLOUDWAYS_PORT is set (${#PORT_VALUE} chars)"
            echo "Port value: ${PORT_VALUE}"
          fi
        env:
          CLOUDWAYS_SSH_KEY: ${{ secrets.CLOUDWAYS_SSH_KEY }}
          HOST_VALUE: ${{ secrets.CLOUDWAYS_HOST }}
          USER_VALUE: ${{ secrets.CLOUDWAYS_USER }}
          PORT_VALUE: ${{ secrets.CLOUDWAYS_PORT }}

      - name: Deploy to Cloudways
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.CLOUDWAYS_HOST }}
          username: ${{ secrets.CLOUDWAYS_USER }}
          key: ${{ secrets.CLOUDWAYS_SSH_KEY }}
          port: ${{ secrets.CLOUDWAYS_PORT }}
          script: |
            echo "=== STARTING DEPLOYMENT ==="
            pwd
            
            # Check if this is first deployment (no git repo)
            if [ ! -d ".git" ]; then
              echo "First deployment detected - cloning repository..."
              
              # Backup any existing files
              if [ "$(ls -A .)" ]; then
                echo "Backing up existing files..."
                mkdir -p ../backup-$(date +%Y%m%d-%H%M%S)
                mv * ../backup-$(date +%Y%m%d-%H%M%S)/ 2>/dev/null || true
              fi
              
              # Clone repository
              git clone https://github.com/Paktas/vendorica-api.git .
              
              echo "Repository cloned successfully"
            else
              echo "Existing repository found - pulling latest changes..."
              git fetch origin
              git reset --hard origin/main
            fi
            
            echo "=== INSTALLING DEPENDENCIES ==="
            npm ci --only=production
            
            echo "=== BUILDING APPLICATION ==="
            npm run build
            
            echo "=== MANAGING PM2 PROCESS ==="
            # Check if PM2 process exists
            if pm2 describe vendorica-api > /dev/null 2>&1; then
              echo "Reloading existing PM2 process..."
              pm2 reload vendorica-api --update-env
            else
              echo "Starting new PM2 process..."
              pm2 start ecosystem.config.js
            fi
            
            # Save PM2 configuration
            pm2 save
            
            echo "=== DEPLOYMENT COMPLETED ==="
            pm2 status
            
      - name: Verify deployment
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.CLOUDWAYS_HOST }}
          username: ${{ secrets.CLOUDWAYS_USER }}
          key: ${{ secrets.CLOUDWAYS_SSH_KEY }}
          port: ${{ secrets.CLOUDWAYS_PORT }}
          script: |
            echo "=== DEPLOYMENT VERIFICATION ==="
            pm2 status
            echo "PM2 processes status shown above"
            
            # Wait a moment for the application to start
            sleep 5
            
            # Test if the application is responding (if health endpoint exists)
            echo "Testing application health..."
            curl -f http://localhost:3000/health 2>/dev/null && echo "✅ Health check passed" || echo "⚠️ Health check failed (endpoint may not exist yet)"