name: Deploy to Cloudways Production

on:
  push:
    branches: [main]
  workflow_dispatch: # Manual trigger

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies and build
        run: |
          npm ci
          npm run build
          
      - name: Debug GitHub Secrets
        run: |
          echo "=== GITHUB SECRETS DEBUG ==="
          
          # Check for each secret
          if [ -z "${{ secrets.CLOUDWAYS_HOST }}" ]; then
            echo "❌ CLOUDWAYS_HOST secret is not set!"
          else
            echo "✅ CLOUDWAYS_HOST is set (${#HOST_VALUE} chars)"
            echo "Host ends with: ...${HOST_VALUE: -8}"
          fi
          
          if [ -z "${{ secrets.CLOUDWAYS_USER }}" ]; then
            echo "❌ CLOUDWAYS_USER secret is not set!"
          else
            echo "✅ CLOUDWAYS_USER is set (${#USER_VALUE} chars)"
            echo "Username ends with: ...${USER_VALUE: -8}"
          fi
          
          if [ -z "${{ secrets.CLOUDWAYS_SSH_KEY }}" ]; then
            echo "❌ CLOUDWAYS_SSH_KEY secret is not set!"
          else
            echo "✅ CLOUDWAYS_SSH_KEY is set (${#CLOUDWAYS_SSH_KEY} chars)"
            
            # Check if SSH key is base64 encoded
            if echo "${CLOUDWAYS_SSH_KEY}" | grep -q "^-----BEGIN"; then
              echo "✅ SSH key format looks correct (starts with -----BEGIN)"
            else
              echo "⚠️ SSH key might be base64 encoded or incorrect format"
              echo "First 30 chars: ${CLOUDWAYS_SSH_KEY:0:30}"
              
              # Try to decode and check
              if echo "${CLOUDWAYS_SSH_KEY}" | base64 -d 2>/dev/null | grep -q "^-----BEGIN"; then
                echo "❌ SSH key IS base64 encoded! It should be plain text."
                echo "The key should start with: -----BEGIN RSA PRIVATE KEY-----"
              fi
            fi
          fi
          
          if [ -z "${{ secrets.CLOUDWAYS_PORT }}" ]; then
            echo "❌ CLOUDWAYS_PORT secret is not set!"
          else
            echo "✅ CLOUDWAYS_PORT is set (${#PORT_VALUE} chars)"
          fi
        env:
          CLOUDWAYS_SSH_KEY: ${{ secrets.CLOUDWAYS_SSH_KEY }}
          HOST_VALUE: ${{ secrets.CLOUDWAYS_HOST }}
          USER_VALUE: ${{ secrets.CLOUDWAYS_USER }}
          PORT_VALUE: ${{ secrets.CLOUDWAYS_PORT }}

      - name: Test SSH Connection
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.CLOUDWAYS_HOST }}
          username: ${{ secrets.CLOUDWAYS_USER }}
          key: ${{ secrets.CLOUDWAYS_SSH_KEY }}
          port: ${{ secrets.CLOUDWAYS_PORT }}
          script: |
            echo "=== SSH CONNECTION TEST ==="
            echo "✅ SSH connection successful!"
            echo "Current directory: $(pwd)"
            echo "User: $(whoami)"
            echo "Server: $(hostname)"

      - name: Check Server Environment
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.CLOUDWAYS_HOST }}
          username: ${{ secrets.CLOUDWAYS_USER }}
          key: ${{ secrets.CLOUDWAYS_SSH_KEY }}
          port: ${{ secrets.CLOUDWAYS_PORT }}
          script_stop: true
          script: |
            echo "=== SERVER ENVIRONMENT CHECK ==="
            echo "Initial directory: $(pwd)"
            echo "Current user: $(whoami)"
            
            echo -e "\n=== NAVIGATING TO PUBLIC_HTML ==="
            cd public_html
            echo "Now in directory: $(pwd)"
            
            echo -e "\n=== PUBLIC_HTML DIRECTORY CONTENTS ==="
            ls -la
            
            echo -e "\n=== AVAILABLE PACKAGES ==="
            echo "Node.js:"
            which node && node --version || echo "Node.js not found"
            
            echo "npm:"
            which npm && npm --version || echo "npm not found"
            
            echo "Git:"
            which git && git --version || echo "Git not found"
            
            echo "PM2:"
            which pm2 && pm2 --version || echo "PM2 not found"
            
            echo -e "\n=== ENVIRONMENT CHECK COMPLETE ==="