name: Deploy to Cloudways Production

on:
  push:
    branches: [main]
  workflow_dispatch: # Manual trigger

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies and build
        run: |
          npm ci
          npm run build
          
      - name: Debug GitHub Secrets
        run: |
          echo "=== GITHUB SECRETS DEBUG ==="
          echo "Host: ${{ secrets.CLOUDWAYS_HOST }}"
          echo "Username: ${{ secrets.CLOUDWAYS_USER }}"
          echo "Port: ${{ secrets.CLOUDWAYS_PORT }}"
          echo "SSH Key length: ${#CLOUDWAYS_SSH_KEY}"
          echo "SSH Key starts with: ${CLOUDWAYS_SSH_KEY:0:50}..."
          
          # Check for each secret
          if [ -z "${{ secrets.CLOUDWAYS_HOST }}" ]; then
            echo "❌ CLOUDWAYS_HOST secret is not set!"
          else
            echo "✅ CLOUDWAYS_HOST is set (${#HOST_VALUE} chars)"
            echo "Host ends with: ...${HOST_VALUE: -8}"
          fi
          
          if [ -z "${{ secrets.CLOUDWAYS_USER }}" ]; then
            echo "❌ CLOUDWAYS_USER secret is not set!"
          else
            echo "✅ CLOUDWAYS_USER is set (${#USER_VALUE} chars)"
            echo "Username ends with: ...${USER_VALUE: -8}"
          fi
          
          if [ -z "${{ secrets.CLOUDWAYS_SSH_KEY }}" ]; then
            echo "❌ CLOUDWAYS_SSH_KEY secret is not set!"
          else
            echo "✅ CLOUDWAYS_SSH_KEY is set (${#CLOUDWAYS_SSH_KEY} chars)"
            
            # Check if SSH key is base64 encoded
            if echo "${CLOUDWAYS_SSH_KEY}" | grep -q "^-----BEGIN"; then
              echo "✅ SSH key format looks correct (starts with -----BEGIN)"
            else
              echo "⚠️ SSH key might be base64 encoded or incorrect format"
              echo "First 30 chars: ${CLOUDWAYS_SSH_KEY:0:30}"
              
              # Try to decode and check
              if echo "${CLOUDWAYS_SSH_KEY}" | base64 -d 2>/dev/null | grep -q "^-----BEGIN"; then
                echo "❌ SSH key IS base64 encoded! It should be plain text."
                echo "The key should start with: -----BEGIN RSA PRIVATE KEY-----"
              fi
            fi
          fi
          
          if [ -z "${{ secrets.CLOUDWAYS_PORT }}" ]; then
            echo "❌ CLOUDWAYS_PORT secret is not set!"
          else
            echo "✅ CLOUDWAYS_PORT is set (${#PORT_VALUE} chars)"
            echo "Port value: ${PORT_VALUE}"
          fi
        env:
          CLOUDWAYS_SSH_KEY: ${{ secrets.CLOUDWAYS_SSH_KEY }}
          HOST_VALUE: ${{ secrets.CLOUDWAYS_HOST }}
          USER_VALUE: ${{ secrets.CLOUDWAYS_USER }}
          PORT_VALUE: ${{ secrets.CLOUDWAYS_PORT }}

      - name: Deploy to Cloudways
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.CLOUDWAYS_HOST }}
          username: ${{ secrets.CLOUDWAYS_USER }}
          key: ${{ secrets.CLOUDWAYS_SSH_KEY }}
          port: ${{ secrets.CLOUDWAYS_PORT }}
          script: |
            echo "=== STARTING DEPLOYMENT ==="
            pwd
            
            # Check if this is first deployment (no git repo)
            if [ ! -d ".git" ]; then
              echo "First deployment detected - cloning repository..."
              
              # List current directory contents for debugging
              echo "Current directory contents:"
              ls -la
              
              # Remove all files and directories (including hidden ones)
              find . -mindepth 1 -delete 2>/dev/null || true
              
              # Verify directory is empty
              echo "After cleanup:"
              ls -la
              
              # Clone repository
              git clone https://github.com/Paktas/vendorica-api.git .
              
              echo "Repository cloned successfully"
              echo "Repository contents:"
              ls -la
            else
              echo "Existing repository found - pulling latest changes..."
              git fetch origin
              git reset --hard origin/main
            fi
            
            echo "=== INSTALLING DEPENDENCIES ==="
            
            # Check if we're in the right directory with package.json
            if [ -f "package.json" ]; then
              echo "✅ package.json found"
            else
              echo "❌ package.json not found in current directory"
              echo "Current directory contents:"
              ls -la
              exit 1
            fi
            
            # Fix any permission issues
            echo "Setting proper permissions..."
            chmod -R 755 .
            
            # Use npm install instead of npm ci since package-lock.json might not exist
            echo "Running npm install..."
            npm install --omit=dev
            
            echo "=== BUILDING APPLICATION ==="
            npm run build
            
            echo "=== MANAGING PM2 PROCESS ==="
            
            # Check if PM2 is available
            if command -v pm2 > /dev/null 2>&1; then
              echo "PM2 found - managing process..."
              
              # Check if PM2 process exists
              if pm2 describe vendorica-api > /dev/null 2>&1; then
                echo "Reloading existing PM2 process..."
                pm2 reload vendorica-api --update-env
              else
                echo "Starting new PM2 process..."
                pm2 start ecosystem.config.js
              fi
              
              # Save PM2 configuration
              pm2 save
              
              echo "=== DEPLOYMENT COMPLETED ==="
              pm2 status
              
            else
              echo "PM2 not found - please install PM2 or contact Cloudways support"
              echo "To install PM2: npm install -g pm2"
              echo "Or request PM2 installation from Cloudways support"
              
              echo "=== DEPLOYMENT COMPLETED (WITHOUT PM2) ==="
              echo "Application files deployed successfully"
              echo "PM2 installation required to run the application"
            fi
            
      - name: Verify deployment
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.CLOUDWAYS_HOST }}
          username: ${{ secrets.CLOUDWAYS_USER }}
          key: ${{ secrets.CLOUDWAYS_SSH_KEY }}
          port: ${{ secrets.CLOUDWAYS_PORT }}
          script: |
            echo "=== DEPLOYMENT VERIFICATION ==="
            
            # Check if PM2 is available for status check
            if command -v pm2 > /dev/null 2>&1; then
              echo "PM2 Status:"
              pm2 status
              
              # Wait a moment for the application to start
              sleep 5
              
              # Test if the application is responding (if health endpoint exists)
              echo "Testing application health..."
              curl -f http://localhost:3000/health 2>/dev/null && echo "✅ Health check passed" || echo "⚠️ Health check failed (endpoint may not exist yet)"
            else
              echo "PM2 not available - cannot check process status"
              echo "Deployment files are in place, but PM2 is required to run the application"
              
              # Check if built files exist
              if [ -f "dist/index.js" ]; then
                echo "✅ Built application files found in dist/"
              else
                echo "❌ Built application files not found - build may have failed"
              fi
            fi