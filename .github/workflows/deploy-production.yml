name: Deploy to Cloudways Production

on:
  push:
    branches: [main]
  workflow_dispatch: # Manual trigger

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: 📦 Install dependencies and build
        run: |
          npm ci
          npm run build
          
      - name: 🔍 Debug GitHub Secrets
        run: |
          echo "=== GITHUB SECRETS DEBUG ==="
          
          # Check for each secret
          if [ -z "${{ secrets.CLOUDWAYS_HOST }}" ]; then
            echo "❌ CLOUDWAYS_HOST secret is not set!"
          else
            echo "✅ CLOUDWAYS_HOST is set (${#HOST_VALUE} chars)"
            echo "Host ends with: ...${HOST_VALUE: -8}"
          fi
          
          if [ -z "${{ secrets.CLOUDWAYS_USER }}" ]; then
            echo "❌ CLOUDWAYS_USER secret is not set!"
          else
            echo "✅ CLOUDWAYS_USER is set (${#USER_VALUE} chars)"
            echo "Username ends with: ...${USER_VALUE: -8}"
          fi
          
          if [ -z "${{ secrets.CLOUDWAYS_SSH_KEY }}" ]; then
            echo "❌ CLOUDWAYS_SSH_KEY secret is not set!"
          else
            echo "✅ CLOUDWAYS_SSH_KEY is set (${#CLOUDWAYS_SSH_KEY} chars)"
            
            # Check if SSH key is base64 encoded
            if echo "${CLOUDWAYS_SSH_KEY}" | grep -q "^-----BEGIN"; then
              echo "✅ SSH key format looks correct (starts with -----BEGIN)"
            else
              echo "⚠️ SSH key might be base64 encoded or incorrect format"
              echo "First 30 chars: ${CLOUDWAYS_SSH_KEY:0:30}"
              
              # Try to decode and check
              if echo "${CLOUDWAYS_SSH_KEY}" | base64 -d 2>/dev/null | grep -q "^-----BEGIN"; then
                echo "❌ SSH key IS base64 encoded! It should be plain text."
                echo "The key should start with: -----BEGIN RSA PRIVATE KEY-----"
              fi
            fi
          fi
          
          if [ -z "${{ secrets.CLOUDWAYS_PORT }}" ]; then
            echo "❌ CLOUDWAYS_PORT secret is not set!"
          else
            echo "✅ CLOUDWAYS_PORT is set (${#PORT_VALUE} chars)"
          fi
        env:
          CLOUDWAYS_SSH_KEY: ${{ secrets.CLOUDWAYS_SSH_KEY }}
          HOST_VALUE: ${{ secrets.CLOUDWAYS_HOST }}
          USER_VALUE: ${{ secrets.CLOUDWAYS_USER }}
          PORT_VALUE: ${{ secrets.CLOUDWAYS_PORT }}

      - name: 🔐 Test SSH Connection
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.CLOUDWAYS_HOST }}
          username: ${{ secrets.CLOUDWAYS_USER }}
          key: ${{ secrets.CLOUDWAYS_SSH_KEY }}
          port: ${{ secrets.CLOUDWAYS_PORT }}
          script: |
            echo "=== SSH CONNECTION TEST ==="
            echo "✅ SSH connection successful!"
            echo "Current directory: $(pwd)"
            echo "User: $(whoami)"
            echo "Server: $(hostname)"

      - name: 🔍 Check Server Environment
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.CLOUDWAYS_HOST }}
          username: ${{ secrets.CLOUDWAYS_USER }}
          key: ${{ secrets.CLOUDWAYS_SSH_KEY }}
          port: ${{ secrets.CLOUDWAYS_PORT }}
          script: |
            echo "Initial directory: $(pwd)"
            echo "Current user: $(whoami)"
            cd public_html
            echo "Working directory: $(pwd)"
            
            echo -e "\n📦 Package versions:"
            echo "Node.js: $(node --version 2>/dev/null || echo 'not found')"
            echo "npm: $(npm --version 2>/dev/null || echo 'not found')"
            echo "Git: $(git --version 2>/dev/null || echo 'not found')"
            echo "PM2: $(pm2 --version 2>/dev/null || echo 'not found')"
            
            # Debug PM2 location
            echo -e "\nPM2 location check:"
            echo "Current PATH: $PATH"
            
            # Check for PM2 global installation
            echo -e "\nPM2 Installation Check:"
            if command -v pm2 > /dev/null 2>&1; then
              echo "✅ PM2 found in PATH: $(which pm2)"
              echo "PM2 version: $(pm2 --version)"
            else
              echo "❌ PM2 not found in PATH"
              echo "Please install PM2 globally: npm install -g pm2"
            fi
            
            # Show npm global configuration
            echo -e "\nnpm Global Configuration:"
            echo "npm prefix: $(npm config get prefix)"
            echo "npm global bin: $(npm bin -g 2>/dev/null || echo 'not available')"

      - name: 🧹 Clean Deployment Directory
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.CLOUDWAYS_HOST }}
          username: ${{ secrets.CLOUDWAYS_USER }}
          key: ${{ secrets.CLOUDWAYS_SSH_KEY }}
          port: ${{ secrets.CLOUDWAYS_PORT }}
          script: |
            cd public_html
            echo "Current directory contents:"
            ls -la
            
            # Clean directory for fresh deployment, but preserve environment files
            if [ -d ".git" ]; then
              echo "Removing existing git repository..."
              rm -rf .git
            fi
            
            # Move environment files to home directory before cleaning
            echo "Moving environment files to home directory..."
            [ -f ".env.production" ] && mv .env.production ~/.env.production.deploy && echo "Moved .env.production to ~/"
            [ -f ".env.local" ] && mv .env.local ~/.env.local.deploy && echo "Moved .env.local to ~/"
            
            echo "Cleaning directory completely..."
            rm -rf * .[^.]* 2>/dev/null || true
            
            # Move environment files back after cleanup
            echo "Moving environment files back..."
            [ -f "~/.env.production.deploy" ] && mv ~/.env.production.deploy .env.production && echo "✅ Restored .env.production"
            [ -f "~/.env.local.deploy" ] && mv ~/.env.local.deploy .env.local && echo "✅ Restored .env.local"
            
            echo "Directory after cleanup:"
            ls -la

      - name: 📥 Clone Repository
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.CLOUDWAYS_HOST }}
          username: ${{ secrets.CLOUDWAYS_USER }}
          key: ${{ secrets.CLOUDWAYS_SSH_KEY }}
          port: ${{ secrets.CLOUDWAYS_PORT }}
          script: |
            cd public_html
            echo "Cloning repository..."
            git clone https://github.com/Paktas/vendorica-api.git .
            
            # Verify clone
            if [ -d ".git" ]; then
              echo "✅ Repository cloned successfully"
              echo "Key files:"
              [ -f "package.json" ] && echo "✅ package.json" || echo "❌ package.json missing"
              [ -d "src" ] && echo "✅ src/" || echo "❌ src/ missing"
              [ -f "tsconfig.json" ] && echo "✅ tsconfig.json" || echo "❌ tsconfig.json missing"
            else
              echo "❌ Git clone failed"
              exit 1
            fi

      - name: 📦 Install Dependencies and PM2
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.CLOUDWAYS_HOST }}
          username: ${{ secrets.CLOUDWAYS_USER }}
          key: ${{ secrets.CLOUDWAYS_SSH_KEY }}
          port: ${{ secrets.CLOUDWAYS_PORT }}
          script: |
            cd public_html
            
            # Fix npm cache permissions
            echo "Fixing npm cache permissions..."
            sudo chown -R 1012:33 "/home/1462634.cloudwaysapps.com/jwnbrgtuur/.npm" 2>/dev/null || true
            
            # Check PM2 installation status
            echo "=== PM2 INSTALLATION DIAGNOSTICS ==="
            echo "Current user: $(whoami)"
            echo "Current PATH: $PATH"
            echo "npm prefix: $(npm config get prefix)"
            echo "npm global bin: $(npm bin -g 2>/dev/null || echo 'not available')"
            
            # Check if PM2 is available anywhere
            echo -e "\nSearching for existing PM2 installations:"
            find /usr /home -name "pm2" -type f 2>/dev/null | head -10 || echo "No PM2 found with find command"
            
            # Check if there's a system-wide PM2
            if sudo which pm2 2>/dev/null; then
              echo "✅ System PM2 found: $(sudo which pm2)"
              echo "System PM2 version: $(sudo pm2 --version 2>/dev/null || echo 'version check failed')"
            fi
            
            # Check current user PM2
            if command -v pm2 > /dev/null 2>&1; then
              echo "✅ User PM2 found: $(which pm2)"
              echo "User PM2 version: $(pm2 --version)"
            else
              echo "❌ No PM2 available for current user"
              
              # Try installing for current user
              echo "Attempting to install PM2 for current user..."
              npm install -g pm2
              
              # Refresh PATH
              export PATH="$(npm config get prefix)/bin:$PATH"
              hash -r
              
              if command -v pm2 > /dev/null 2>&1; then
                echo "✅ PM2 installed for user: $(which pm2)"
                echo "PM2 version: $(pm2 --version)"
              else
                echo "❌ PM2 installation failed for current user"
                echo "Will attempt to use system PM2 or skip PM2 for this deployment"
              fi
            fi
            
            echo "Installing production dependencies..."
            npm install --omit=dev
            
            # Verify installation
            if [ -d "node_modules" ]; then
              echo "✅ Dependencies installed successfully"
              echo "node_modules size: $(du -sh node_modules 2>/dev/null | cut -f1)"
            else
              echo "❌ npm install failed"
              exit 1
            fi

      - name: 🔨 Build Application
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.CLOUDWAYS_HOST }}
          username: ${{ secrets.CLOUDWAYS_USER }}
          key: ${{ secrets.CLOUDWAYS_SSH_KEY }}
          port: ${{ secrets.CLOUDWAYS_PORT }}
          script: |
            cd public_html
            
            echo "Building application..."
            npm run build
            
            # Verify build
            if [ -d "dist" ]; then
              echo "✅ Build completed successfully"
              echo "Build size: $(du -sh dist 2>/dev/null | cut -f1)"
              echo "Key files:"
              [ -f "dist/index.js" ] && echo "✅ dist/index.js" || echo "❌ dist/index.js missing"
              [ -f "dist/app.js" ] && echo "✅ dist/app.js" || echo "⚠️ dist/app.js not required"
            else
              echo "❌ Build failed - dist directory not found"
              exit 1
            fi

      - name: ⚙️ Setup PM2 Process
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.CLOUDWAYS_HOST }}
          username: ${{ secrets.CLOUDWAYS_USER }}
          key: ${{ secrets.CLOUDWAYS_SSH_KEY }}
          port: ${{ secrets.CLOUDWAYS_PORT }}
          script: |
            cd public_html
            
            # PM2 process management with fallback options
            echo "Starting PM2 process management..."
            
            # Determine which PM2 to use
            PM2_CMD=""
            if command -v pm2 > /dev/null 2>&1; then
              PM2_CMD="pm2"
              echo "Using user PM2: $(which pm2)"
            elif sudo which pm2 > /dev/null 2>&1; then
              PM2_CMD="sudo pm2"
              echo "Using system PM2: $(sudo which pm2)"
            else
              echo "❌ No PM2 available - will run application directly"
              # Start app directly without PM2
              if [ -f "dist/index.js" ]; then
                echo "Starting application directly with Node.js..."
                nohup node dist/index.js > ~/logs/vendorica-api.log 2>&1 &
                echo $! > ~/vendorica-api.pid
                echo "✅ Application started with PID: $(cat ~/vendorica-api.pid)"
                echo "⚠️ Application running without PM2 process management"
                exit 0
              else
                echo "❌ No dist/index.js found"
                exit 1
              fi
            fi
            
            # Verify logs directory exists
            if [ -d "$HOME/logs" ]; then
              echo "✅ Using existing logs directory: ~/logs/"
            else
              echo "❌ Logs directory not found at ~/logs/"
              exit 1
            fi
            
            # Verify ecosystem config exists and test it
            if [ -f "ecosystem.config.mjs" ]; then
              echo "✅ ecosystem.config.mjs found"
              echo "Config file contents:"
              head -5 ecosystem.config.mjs
              
              # Try starting with explicit syntax
              echo "Attempting to start PM2 process..."
              $PM2_CMD start ecosystem.config.mjs --env production 2>&1 || {
                echo "❌ PM2 start with .mjs failed, trying alternative approach..."
                
                # Alternative: start directly with script path
                if [ -f "dist/index.js" ]; then
                  echo "Starting PM2 directly with script path..."
                  $PM2_CMD start dist/index.js --name vendorica-api --instances 2 --env production 2>&1
                else
                  echo "❌ dist/index.js not found"
                  exit 1
                fi
              }
            else
              echo "❌ ecosystem.config.mjs missing"
              exit 1
            fi
            
            $PM2_CMD save
            echo "✅ PM2 process configured"

      - name: 🏁 Deployment Summary
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.CLOUDWAYS_HOST }}
          username: ${{ secrets.CLOUDWAYS_USER }}
          key: ${{ secrets.CLOUDWAYS_SSH_KEY }}
          port: ${{ secrets.CLOUDWAYS_PORT }}
          script: |
            cd public_html
            echo "=== DEPLOYMENT SUMMARY ==="
            echo "✅ Repository: Cloned"
            echo "✅ Dependencies: Installed" 
            echo "✅ Build: Completed"
            
            # Production Environment Check
            echo -e "\n🔍 Production Environment Check:"
            
            # Check for environment file
            if [ -f ".env.production" ]; then
              echo "✅ .env.production file exists"
              echo "Environment variables:"
              grep -E "^(PORT|NODE_ENV|API_BASE_URL)" .env.production 2>/dev/null || echo "No PORT/NODE_ENV/API_BASE_URL found"
            else
              echo "❌ .env.production file missing - this may cause issues!"
              echo "App will use default configuration"
            fi
            
            # Check what port the app is using
            echo -e "\nChecking application port binding..."
            sleep 5  # Give PM2 time to fully start
            
            # Show all listening ports
            echo "All processes listening on ports:"
            netstat -tlnp 2>/dev/null | grep LISTEN
            
            # Check PM2 logs for port information
            echo -e "\nPM2 Application Logs (last 10 lines):"
            
            # Check PM2 status with fallback
            if command -v pm2 > /dev/null 2>&1; then
              echo "✅ PM2: Available (user)"
              pm2 status
              echo -e "\nRecent application logs:"
              pm2 logs vendorica-api --lines 5 --nostream 2>/dev/null || echo "No PM2 logs available"
            elif sudo which pm2 > /dev/null 2>&1; then
              echo "✅ PM2: Available (system)"
              sudo pm2 status
              echo -e "\nRecent application logs:"
              sudo pm2 logs vendorica-api --lines 5 --nostream 2>/dev/null || echo "No PM2 logs available"
            else
              echo "⚠️ PM2: Not available - checking direct process"
              if [ -f ~/vendorica-api.pid ]; then
                PID=$(cat ~/vendorica-api.pid)
                if ps -p $PID > /dev/null; then
                  echo "✅ Application running directly with PID: $PID"
                  echo -e "\nRecent application logs:"
                  tail -5 ~/logs/vendorica-api.log 2>/dev/null || echo "No direct logs available"
                else
                  echo "❌ Application not running"
                fi
              fi
            fi
            
            echo -e "\n📁 Deployment path: $(pwd)"
            echo "🚀 Deployment completed successfully!"