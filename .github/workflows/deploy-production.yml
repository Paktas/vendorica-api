name: Deploy to Cloudways Production

on:
  push:
    branches: [main]
  workflow_dispatch: # Manual trigger

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies and build
        run: |
          npm ci
          npm run build
          
      - name: Debug GitHub Secrets
        run: |
          echo "=== GITHUB SECRETS DEBUG ==="
          
          # Check for each secret
          if [ -z "${{ secrets.CLOUDWAYS_HOST }}" ]; then
            echo "‚ùå CLOUDWAYS_HOST secret is not set!"
          else
            echo "‚úÖ CLOUDWAYS_HOST is set (${#HOST_VALUE} chars)"
            echo "Host ends with: ...${HOST_VALUE: -8}"
          fi
          
          if [ -z "${{ secrets.CLOUDWAYS_USER }}" ]; then
            echo "‚ùå CLOUDWAYS_USER secret is not set!"
          else
            echo "‚úÖ CLOUDWAYS_USER is set (${#USER_VALUE} chars)"
            echo "Username ends with: ...${USER_VALUE: -8}"
          fi
          
          if [ -z "${{ secrets.CLOUDWAYS_SSH_KEY }}" ]; then
            echo "‚ùå CLOUDWAYS_SSH_KEY secret is not set!"
          else
            echo "‚úÖ CLOUDWAYS_SSH_KEY is set (${#CLOUDWAYS_SSH_KEY} chars)"
            
            # Check if SSH key is base64 encoded
            if echo "${CLOUDWAYS_SSH_KEY}" | grep -q "^-----BEGIN"; then
              echo "‚úÖ SSH key format looks correct (starts with -----BEGIN)"
            else
              echo "‚ö†Ô∏è SSH key might be base64 encoded or incorrect format"
              echo "First 30 chars: ${CLOUDWAYS_SSH_KEY:0:30}"
              
              # Try to decode and check
              if echo "${CLOUDWAYS_SSH_KEY}" | base64 -d 2>/dev/null | grep -q "^-----BEGIN"; then
                echo "‚ùå SSH key IS base64 encoded! It should be plain text."
                echo "The key should start with: -----BEGIN RSA PRIVATE KEY-----"
              fi
            fi
          fi
          
          if [ -z "${{ secrets.CLOUDWAYS_PORT }}" ]; then
            echo "‚ùå CLOUDWAYS_PORT secret is not set!"
          else
            echo "‚úÖ CLOUDWAYS_PORT is set (${#PORT_VALUE} chars)"
          fi
        env:
          CLOUDWAYS_SSH_KEY: ${{ secrets.CLOUDWAYS_SSH_KEY }}
          HOST_VALUE: ${{ secrets.CLOUDWAYS_HOST }}
          USER_VALUE: ${{ secrets.CLOUDWAYS_USER }}
          PORT_VALUE: ${{ secrets.CLOUDWAYS_PORT }}

      - name: Test SSH Connection
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.CLOUDWAYS_HOST }}
          username: ${{ secrets.CLOUDWAYS_USER }}
          key: ${{ secrets.CLOUDWAYS_SSH_KEY }}
          port: ${{ secrets.CLOUDWAYS_PORT }}
          script: |
            echo "=== SSH CONNECTION TEST ==="
            echo "‚úÖ SSH connection successful!"
            echo "Current directory: $(pwd)"
            echo "User: $(whoami)"
            echo "Server: $(hostname)"

      - name: Check Server Environment
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.CLOUDWAYS_HOST }}
          username: ${{ secrets.CLOUDWAYS_USER }}
          key: ${{ secrets.CLOUDWAYS_SSH_KEY }}
          port: ${{ secrets.CLOUDWAYS_PORT }}
          script: |
            echo "Initial directory: $(pwd)"
            echo "Current user: $(whoami)"
            cd public_html
            echo "Working directory: $(pwd)"
            
            echo -e "\nüì¶ Package versions:"
            echo "Node.js: $(node --version 2>/dev/null || echo 'not found')"
            echo "npm: $(npm --version 2>/dev/null || echo 'not found')"
            echo "Git: $(git --version 2>/dev/null || echo 'not found')"
            echo "PM2: $(pm2 --version 2>/dev/null || echo 'not found')"
            
            # Debug PM2 location
            echo -e "\nPM2 location check:"
            echo "Current PATH: $PATH"
            
            # Check for PM2 global installation
            echo -e "\nPM2 Installation Check:"
            if command -v pm2 > /dev/null 2>&1; then
              echo "‚úÖ PM2 found in PATH: $(which pm2)"
              echo "PM2 version: $(pm2 --version)"
            else
              echo "‚ùå PM2 not found in PATH"
              echo "Please install PM2 globally: npm install -g pm2"
            fi
            
            # Show npm global configuration
            echo -e "\nnpm Global Configuration:"
            echo "npm prefix: $(npm config get prefix)"
            echo "npm global bin: $(npm bin -g 2>/dev/null || echo 'not available')"

      - name: Clean Deployment Directory
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.CLOUDWAYS_HOST }}
          username: ${{ secrets.CLOUDWAYS_USER }}
          key: ${{ secrets.CLOUDWAYS_SSH_KEY }}
          port: ${{ secrets.CLOUDWAYS_PORT }}
          script: |
            cd public_html
            echo "Current directory contents:"
            ls -la
            
            echo "Cleaning directory completely for fresh deployment..."
            rm -rf * .[^.]* 2>/dev/null || true
            
            echo "Directory after cleanup:"
            ls -la
            echo "‚úÖ Directory cleaned successfully"

      - name: Clone Repository and Setup Environment
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.CLOUDWAYS_HOST }}
          username: ${{ secrets.CLOUDWAYS_USER }}
          key: ${{ secrets.CLOUDWAYS_SSH_KEY }}
          port: ${{ secrets.CLOUDWAYS_PORT }}
          script: |
            cd public_html
            echo "Cloning repository..."
            git clone https://github.com/Paktas/vendorica-api.git .
            
            # Verify clone
            if [ -d ".git" ]; then
              echo "‚úÖ Repository cloned successfully"
              echo "Key files:"
              [ -f "package.json" ] && echo "‚úÖ package.json" || echo "‚ùå package.json missing"
              [ -d "src" ] && echo "‚úÖ src/" || echo "‚ùå src/ missing"
              [ -f "tsconfig.json" ] && echo "‚úÖ tsconfig.json" || echo "‚ùå tsconfig.json missing"
              [ -f ".htaccess" ] && echo "‚úÖ .htaccess" || echo "‚ùå .htaccess missing"
            else
              echo "‚ùå Git clone failed"
              exit 1
            fi
            
            echo -e "\n=== Creating Production Environment ==="
            echo "Creating .env.production file from GitHub secret..."
            cat > .env.production << 'EOF'
            ${{ secrets.ENV_PRODUCTION }}
            EOF
            
            # Verify environment file was created
            if [ -f ".env.production" ]; then
              echo "‚úÖ .env.production file created successfully"
              echo "File size: $(wc -c < .env.production) bytes"
              echo "Line count: $(wc -l < .env.production) lines"
              
              # Show non-sensitive environment variables for verification
              echo "Environment configuration:"
              grep -E "^(NODE_ENV|PORT|API_BASE_URL)" .env.production || echo "Basic env vars not found"
            else
              echo "‚ùå Failed to create .env.production file"
              exit 1
            fi

      - name: Install Dependencies, Build, and Setup PM2
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.CLOUDWAYS_HOST }}
          username: ${{ secrets.CLOUDWAYS_USER }}
          key: ${{ secrets.CLOUDWAYS_SSH_KEY }}
          port: ${{ secrets.CLOUDWAYS_PORT }}
          command_timeout: 20m
          script: |
            cd public_html
            
            # Fix npm cache permissions
            echo "Fixing npm cache permissions..."
            sudo chown -R 1012:33 "/home/1462634.cloudwaysapps.com/jwnbrgtuur/.npm" 2>/dev/null || true
            
            # Check Cloudways PM2 setup (as per Cloudways support guidance)
            echo "=== CLOUDWAYS PM2 SETUP ==="
            echo "Current user: $(whoami)"
            echo "Current directory: $(pwd)"
            
            # Check if PM2 is installed globally by root (done by Cloudways support)
            if command -v pm2 > /dev/null 2>&1; then
              echo "‚úÖ Global PM2 found: $(which pm2)"
              echo "PM2 version: $(pm2 --version)"
            else
              echo "‚ùå PM2 not found globally"
              echo "PM2 must be installed by Cloudways support using:"
              echo "sudo npm install --location=global pm2@latest"
            fi
            
            # Check/Create .pm2 directory for this application (Cloudways requirement)
            if [ -d "$HOME/.pm2" ]; then
              echo "‚úÖ .pm2 directory exists: $HOME/.pm2"
              ls -la "$HOME/.pm2" | head -3
            else
              echo "Creating .pm2 directory for application PM2 access..."
              mkdir -p "$HOME/.pm2"
              chown -R $(whoami):www-data "$HOME/.pm2" 2>/dev/null || chown -R $(whoami):$(id -gn) "$HOME/.pm2"
              echo "‚úÖ Created .pm2 directory with proper permissions"
              ls -la "$HOME/.pm2"
            fi
            
            # Verify PM2 access for current user
            if command -v pm2 > /dev/null 2>&1 && [ -d "$HOME/.pm2" ]; then
              echo "‚úÖ PM2 should be accessible for current user"
              pm2 ping 2>/dev/null && echo "‚úÖ PM2 daemon responsive" || echo "‚ö†Ô∏è PM2 daemon not responsive"
            else
              echo "‚ùå PM2 setup incomplete - check global installation and .pm2 directory"
            fi
            
            echo "Installing production dependencies..."
            npm install --omit=dev
            
            # Verify installation
            if [ -d "node_modules" ]; then
              echo "‚úÖ Dependencies installed successfully"
              echo "node_modules size: $(du -sh node_modules 2>/dev/null | cut -f1)"
            else
              echo "‚ùå npm install failed"
              exit 1
            fi
            
            echo -e "\n=== BUILD APPLICATION ==="
            echo "Building application..."
            npm run build
            
            # Verify build
            if [ -d "dist" ]; then
              echo "‚úÖ Build completed successfully"
              echo "Build size: $(du -sh dist 2>/dev/null | cut -f1)"
              echo "Key files:"
              [ -f "dist/index.js" ] && echo "‚úÖ dist/index.js" || echo "‚ùå dist/index.js missing"
              [ -f "dist/app.js" ] && echo "‚úÖ dist/app.js" || echo "‚ö†Ô∏è dist/app.js not required"
              
              # Copy .htaccess to dist/ for Cloudways webroot configuration
              echo "Copying .htaccess to dist/ directory (Cloudways webroot)..."
              cp .htaccess dist/
              echo "‚úÖ .htaccess copied to dist/"
            else
              echo "‚ùå Build failed - dist directory not found"
              exit 1
            fi
            
            echo -e "\n=== SETUP AND VERIFY PM2 PROCESS ==="
            # PM2 process management with fallback options
            echo "Starting PM2 process management..."
            
            # Use PM2 with Cloudways setup (global PM2 + .pm2 directory)
            if command -v pm2 > /dev/null 2>&1 && [ -d "$HOME/.pm2" ]; then
              echo "‚úÖ Using Cloudways PM2 setup"
              echo "Global PM2 with application .pm2 directory access"
              PM2_CMD="pm2"
            else
              echo "‚ùå Cloudways PM2 setup incomplete"
              if ! command -v pm2 > /dev/null 2>&1; then
                echo "Missing: Global PM2 installation (contact Cloudways support)"
              fi
              if [ ! -d "$HOME/.pm2" ]; then
                echo "Missing: .pm2 directory (should have been created above)"
              fi
              
              # Fallback to direct Node.js execution
              echo "Falling back to direct Node.js execution..."
              if [ -f "dist/index.js" ]; then
                echo "Starting application directly with Node.js..."
                # Stop any existing direct process
                [ -f ~/vendorica-api.pid ] && kill $(cat ~/vendorica-api.pid) 2>/dev/null || true
                nohup node dist/index.js > ~/logs/vendorica-api.log 2>&1 &
                echo $! > ~/vendorica-api.pid
                echo "‚úÖ Application restarted with PID: $(cat ~/vendorica-api.pid)"
                echo "‚ö†Ô∏è Application running without PM2 process management"
                exit 0
              else
                echo "‚ùå No dist/index.js found"
                exit 1
              fi
            fi
            
            # Verify logs directory exists
            if [ -d "$HOME/logs" ]; then
              echo "‚úÖ Using existing logs directory: ~/logs/"
            else
              echo "‚ùå Logs directory not found at ~/logs/"
              exit 1
            fi
            
            # Verify ecosystem config exists
            if [ -f "ecosystem.config.mjs" ]; then
              echo "‚úÖ ecosystem.config.mjs found"
              echo "Config file contents:"
              head -5 ecosystem.config.mjs
            else
              echo "‚ùå ecosystem.config.mjs missing"
              exit 1
            fi
            
            # Smart PM2 deployment strategy
            echo "Deploying PM2 application..."
            
            # Check if vendorica-api is already running
            if $PM2_CMD list | grep -q "vendorica-api"; then
              echo "‚úÖ Existing vendorica-api processes found - performing zero-downtime reload"
              $PM2_CMD reload vendorica-api --update-env
              echo "‚úÖ PM2 processes reloaded with new code"
            else
              echo "üöÄ No existing processes found - starting fresh"
              # Try starting with ecosystem config first
              if $PM2_CMD start ecosystem.config.mjs 2>&1; then
                echo "‚úÖ PM2 started with ecosystem.config.mjs"
              else
                echo "‚ö†Ô∏è ecosystem.config.mjs failed, trying direct script..."
                if [ -f "dist/index.js" ]; then
                  $PM2_CMD start dist/index.js --name vendorica-api --instances 2 --env production
                  echo "‚úÖ PM2 started with direct script"
                else
                  echo "‚ùå dist/index.js not found"
                  exit 1
                fi
              fi
            fi
            
            $PM2_CMD save
            
            # Immediate PM2 verification
            echo -e "\n=== PM2 STATUS VERIFICATION ==="
            if command -v pm2 > /dev/null 2>&1 && [ -d "$HOME/.pm2" ]; then
              echo "‚úÖ PM2 Status:"
              pm2 status
              
              echo -e "\nüìã Recent application logs:"
              pm2 logs vendorica-api --lines 5 --nostream 2>/dev/null || echo "No PM2 logs available yet"
              
              # Check if processes are actually running
              if pm2 list | grep -q "online"; then
                echo "‚úÖ PM2 processes are running successfully"
              else
                echo "‚ö†Ô∏è PM2 processes may not be running properly"
              fi
            else
              echo "‚ö†Ô∏è PM2 verification skipped - using direct Node.js execution"
              if [ -f ~/vendorica-api.pid ]; then
                PID=$(cat ~/vendorica-api.pid)
                if ps -p $PID > /dev/null; then
                  echo "‚úÖ Application running directly with PID: $PID"
                else
                  echo "‚ùå Application not running"
                fi
              fi
            fi
            
            # Production Environment Check
            echo -e "\nüîç Production Environment Check:"
            
            # Check for environment file
            if [ -f ".env.production" ]; then
              echo "‚úÖ .env.production file exists"
              echo "Environment variables:"
              grep -E "^(PORT|NODE_ENV|API_BASE_URL)" .env.production 2>/dev/null || echo "No PORT/NODE_ENV/API_BASE_URL found"
            else
              echo "‚ùå .env.production file missing - this may cause issues!"
              echo "App will use default configuration"
            fi
            
            # Network Status Check
            echo -e "\nüåê Network Status:"
            echo "All processes listening on ports:"
            netstat -tlnp 2>/dev/null | grep LISTEN
            
            echo "‚úÖ PM2 process configured and verified"

      - name: Deployment Summary
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.CLOUDWAYS_HOST }}
          username: ${{ secrets.CLOUDWAYS_USER }}
          key: ${{ secrets.CLOUDWAYS_SSH_KEY }}
          port: ${{ secrets.CLOUDWAYS_PORT }}
          script: |
            cd public_html
            echo "=== DEPLOYMENT SUMMARY ==="
            echo "‚úÖ Repository: Cloned and configured"
            echo "‚úÖ Dependencies: Installed" 
            echo "‚úÖ Build: Completed successfully"
            echo "‚úÖ PM2: Running with 2 cluster instances"
            echo "‚úÖ Environment: Production configuration active"
            echo "‚úÖ Network: Apache proxy routing to Node.js"
            
            echo -e "\nüìÅ Deployment path: $(pwd)"
            echo "üöÄ Deployment completed successfully!"
            echo "üåê API should be accessible via your domain"