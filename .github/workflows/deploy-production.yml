name: Deploy to Cloudways Production

on:
  push:
    branches: [main]
  workflow_dispatch: # Manual trigger

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        
      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: üì¶ Install dependencies and build
        run: |
          npm ci
          npm run build
          
      - name: üîç Debug GitHub Secrets
        run: |
          echo "=== GITHUB SECRETS DEBUG ==="
          
          # Check for each secret
          if [ -z "${{ secrets.CLOUDWAYS_HOST }}" ]; then
            echo "‚ùå CLOUDWAYS_HOST secret is not set!"
          else
            echo "‚úÖ CLOUDWAYS_HOST is set (${#HOST_VALUE} chars)"
            echo "Host ends with: ...${HOST_VALUE: -8}"
          fi
          
          if [ -z "${{ secrets.CLOUDWAYS_USER }}" ]; then
            echo "‚ùå CLOUDWAYS_USER secret is not set!"
          else
            echo "‚úÖ CLOUDWAYS_USER is set (${#USER_VALUE} chars)"
            echo "Username ends with: ...${USER_VALUE: -8}"
          fi
          
          if [ -z "${{ secrets.CLOUDWAYS_SSH_KEY }}" ]; then
            echo "‚ùå CLOUDWAYS_SSH_KEY secret is not set!"
          else
            echo "‚úÖ CLOUDWAYS_SSH_KEY is set (${#CLOUDWAYS_SSH_KEY} chars)"
            
            # Check if SSH key is base64 encoded
            if echo "${CLOUDWAYS_SSH_KEY}" | grep -q "^-----BEGIN"; then
              echo "‚úÖ SSH key format looks correct (starts with -----BEGIN)"
            else
              echo "‚ö†Ô∏è SSH key might be base64 encoded or incorrect format"
              echo "First 30 chars: ${CLOUDWAYS_SSH_KEY:0:30}"
              
              # Try to decode and check
              if echo "${CLOUDWAYS_SSH_KEY}" | base64 -d 2>/dev/null | grep -q "^-----BEGIN"; then
                echo "‚ùå SSH key IS base64 encoded! It should be plain text."
                echo "The key should start with: -----BEGIN RSA PRIVATE KEY-----"
              fi
            fi
          fi
          
          if [ -z "${{ secrets.CLOUDWAYS_PORT }}" ]; then
            echo "‚ùå CLOUDWAYS_PORT secret is not set!"
          else
            echo "‚úÖ CLOUDWAYS_PORT is set (${#PORT_VALUE} chars)"
          fi
        env:
          CLOUDWAYS_SSH_KEY: ${{ secrets.CLOUDWAYS_SSH_KEY }}
          HOST_VALUE: ${{ secrets.CLOUDWAYS_HOST }}
          USER_VALUE: ${{ secrets.CLOUDWAYS_USER }}
          PORT_VALUE: ${{ secrets.CLOUDWAYS_PORT }}

      - name: üîê Test SSH Connection
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.CLOUDWAYS_HOST }}
          username: ${{ secrets.CLOUDWAYS_USER }}
          key: ${{ secrets.CLOUDWAYS_SSH_KEY }}
          port: ${{ secrets.CLOUDWAYS_PORT }}
          script: |
            echo "=== SSH CONNECTION TEST ==="
            echo "‚úÖ SSH connection successful!"
            echo "Current directory: $(pwd)"
            echo "User: $(whoami)"
            echo "Server: $(hostname)"

      - name: üîç Check Server Environment
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.CLOUDWAYS_HOST }}
          username: ${{ secrets.CLOUDWAYS_USER }}
          key: ${{ secrets.CLOUDWAYS_SSH_KEY }}
          port: ${{ secrets.CLOUDWAYS_PORT }}
          script: |
            echo "Initial directory: $(pwd)"
            echo "Current user: $(whoami)"
            cd public_html
            echo "Working directory: $(pwd)"
            
            echo -e "\nüì¶ Package versions:"
            echo "Node.js: $(node --version 2>/dev/null || echo 'not found')"
            echo "npm: $(npm --version 2>/dev/null || echo 'not found')"
            echo "Git: $(git --version 2>/dev/null || echo 'not found')"
            echo "PM2: $(pm2 --version 2>/dev/null || echo 'not found')"
            
            # Debug PM2 location
            echo -e "\nPM2 location check:"
            echo "Current PATH: $PATH"
            
            # Check for Cloudways-specific aliases file
            if [ -f "$HOME/.bash_aliases" ]; then
              echo "‚úÖ Found Cloudways .bash_aliases file"
              source "$HOME/.bash_aliases"
              echo "PATH after sourcing: $PATH"
              PM2_ALIAS_FULL=$(alias pm2 2>/dev/null || echo 'not set')
              echo "PM2 alias: $PM2_ALIAS_FULL"
              
              # Extract and test the PM2 path from alias
              if [[ "$PM2_ALIAS_FULL" != "not set" ]]; then
                PM2_ALIAS_PATH=$(echo "$PM2_ALIAS_FULL" | cut -d"'" -f2)
                echo "PM2 alias path: $PM2_ALIAS_PATH"
                if [ -f "$PM2_ALIAS_PATH" ]; then
                  echo "‚úÖ PM2 executable exists at alias path"
                  "$PM2_ALIAS_PATH" --version 2>/dev/null || echo "‚ùå PM2 executable not working"
                else
                  echo "‚ùå PM2 executable not found at alias path"
                fi
              fi
            else
              echo "‚ùå Cloudways .bash_aliases file not found"
            fi
            
            # Now check for PM2
            which pm2 || echo "PM2 not in PATH"
            
            # Also check common PM2 locations directly
            echo -e "\nSearching for PM2 in common locations:"
            for dir in /usr/local/bin /usr/bin /bin $HOME/.npm-global/bin $HOME/node_modules/.bin /usr/lib/node_modules/.bin $HOME/.nvm/versions/node/*/bin; do
              if [ -f "$dir/pm2" ]; then
                echo "‚úÖ Found PM2 at: $dir/pm2"
                $dir/pm2 --version
              fi
            done
            
            # Check npm global bin location
            NPM_BIN=$(npm bin -g 2>/dev/null)
            if [ -n "$NPM_BIN" ] && [ -f "$NPM_BIN/pm2" ]; then
              echo "‚úÖ Found PM2 in npm global: $NPM_BIN/pm2"
              $NPM_BIN/pm2 --version
            fi

      - name: üßπ Clean Deployment Directory
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.CLOUDWAYS_HOST }}
          username: ${{ secrets.CLOUDWAYS_USER }}
          key: ${{ secrets.CLOUDWAYS_SSH_KEY }}
          port: ${{ secrets.CLOUDWAYS_PORT }}
          script: |
            cd public_html
            echo "Current directory contents:"
            ls -la
            
            # Clean directory for fresh deployment, but preserve environment files
            if [ -d ".git" ]; then
              echo "Removing existing git repository..."
              rm -rf .git
            fi
            
            # Backup environment files before cleaning
            echo "Backing up environment files..."
            [ -f ".env.production" ] && cp .env.production .env.production.backup
            [ -f ".env.local" ] && cp .env.local .env.local.backup
            
            echo "Cleaning directory (preserving environment files)..."
            find . -mindepth 1 -maxdepth 1 ! -name ".env.*.backup" -exec rm -rf {} +
            
            # Restore environment files
            echo "Restoring environment files..."
            [ -f ".env.production.backup" ] && mv .env.production.backup .env.production && echo "‚úÖ Restored .env.production"
            [ -f ".env.local.backup" ] && mv .env.local.backup .env.local && echo "‚úÖ Restored .env.local"
            
            echo "Directory after cleanup:"
            ls -la

      - name: üì• Clone Repository
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.CLOUDWAYS_HOST }}
          username: ${{ secrets.CLOUDWAYS_USER }}
          key: ${{ secrets.CLOUDWAYS_SSH_KEY }}
          port: ${{ secrets.CLOUDWAYS_PORT }}
          script: |
            cd public_html
            echo "Cloning repository..."
            git clone https://github.com/Paktas/vendorica-api.git .
            
            # Verify clone
            if [ -d ".git" ]; then
              echo "‚úÖ Repository cloned successfully"
              echo "Key files:"
              [ -f "package.json" ] && echo "‚úÖ package.json" || echo "‚ùå package.json missing"
              [ -d "src" ] && echo "‚úÖ src/" || echo "‚ùå src/ missing"
              [ -f "tsconfig.json" ] && echo "‚úÖ tsconfig.json" || echo "‚ùå tsconfig.json missing"
            else
              echo "‚ùå Git clone failed"
              exit 1
            fi

      - name: üì¶ Install Dependencies
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.CLOUDWAYS_HOST }}
          username: ${{ secrets.CLOUDWAYS_USER }}
          key: ${{ secrets.CLOUDWAYS_SSH_KEY }}
          port: ${{ secrets.CLOUDWAYS_PORT }}
          script: |
            cd public_html
            
            # Fix npm cache permissions
            echo "Fixing npm cache permissions..."
            sudo chown -R 1012:33 "/home/1462634.cloudwaysapps.com/jwnbrgtuur/.npm" 2>/dev/null || true
            
            echo "Installing production dependencies..."
            npm install --omit=dev
            
            # Verify installation
            if [ -d "node_modules" ]; then
              echo "‚úÖ Dependencies installed successfully"
              echo "node_modules size: $(du -sh node_modules 2>/dev/null | cut -f1)"
            else
              echo "‚ùå npm install failed"
              exit 1
            fi

      - name: üî® Build Application
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.CLOUDWAYS_HOST }}
          username: ${{ secrets.CLOUDWAYS_USER }}
          key: ${{ secrets.CLOUDWAYS_SSH_KEY }}
          port: ${{ secrets.CLOUDWAYS_PORT }}
          script: |
            cd public_html
            
            echo "Building application..."
            npm run build
            
            # Verify build
            if [ -d "dist" ]; then
              echo "‚úÖ Build completed successfully"
              echo "Build size: $(du -sh dist 2>/dev/null | cut -f1)"
              echo "Key files:"
              [ -f "dist/index.js" ] && echo "‚úÖ dist/index.js" || echo "‚ùå dist/index.js missing"
              [ -f "dist/app.js" ] && echo "‚úÖ dist/app.js" || echo "‚ö†Ô∏è dist/app.js not required"
            else
              echo "‚ùå Build failed - dist directory not found"
              exit 1
            fi

      - name: ‚öôÔ∏è Setup PM2 Process
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.CLOUDWAYS_HOST }}
          username: ${{ secrets.CLOUDWAYS_USER }}
          key: ${{ secrets.CLOUDWAYS_SSH_KEY }}
          port: ${{ secrets.CLOUDWAYS_PORT }}
          script: |
            cd public_html
            
            # Source Cloudways-specific aliases file  
            if [ -f "$HOME/.bash_aliases" ]; then
              echo "Sourcing Cloudways .bash_aliases..."
              source "$HOME/.bash_aliases"
            fi
            
            # Find PM2 executable
            PM2_PATH=""
            
            # Check if PM2 alias exists and extract the path
            PM2_ALIAS=$(alias pm2 2>/dev/null | cut -d"'" -f2)
            if [ -n "$PM2_ALIAS" ] && [ -f "$PM2_ALIAS" ]; then
              PM2_PATH="$PM2_ALIAS"
              echo "PM2 found via alias: $PM2_PATH"
            elif command -v pm2 > /dev/null 2>&1; then
              PM2_PATH="pm2"
              echo "PM2 found via command: $PM2_PATH"
            else
              # Try the exact Cloudways path from your SSH session
              CLOUDWAYS_PM2="/home/1462634.cloudwaysapps.com/jwnbrgtuur/bin/npm/lib/node_modules/bin/pm2"
              if [ -f "$CLOUDWAYS_PM2" ]; then
                PM2_PATH="$CLOUDWAYS_PM2"
                echo "PM2 found at Cloudways path: $PM2_PATH"
              else
                # Try npm global bin as fallback
                NPM_BIN=$(npm bin -g 2>/dev/null)
                if [ -n "$NPM_BIN" ] && [ -f "$NPM_BIN/pm2" ]; then
                  PM2_PATH="$NPM_BIN/pm2"
                  echo "PM2 found via npm global: $PM2_PATH"
                fi
              fi
            fi
            
            if [ -n "$PM2_PATH" ]; then
              echo "PM2 found at: $PM2_PATH"
              
              # Verify logs directory exists
              if [ -d "$HOME/logs" ]; then
                echo "‚úÖ Using existing logs directory: ~/logs/"
              else
                echo "‚ùå Logs directory not found at ~/logs/"
                exit 1
              fi
              
              # Verify ecosystem config exists and test it
              if [ -f "ecosystem.config.mjs" ]; then
                echo "‚úÖ ecosystem.config.mjs found"
                echo "Config file contents:"
                head -5 ecosystem.config.mjs
                
                # Test if PM2 can read the config
                echo "Testing PM2 config validation..."
                $PM2_PATH prettylist 2>/dev/null || true
                
                # Try starting with explicit syntax
                echo "Attempting to start PM2 process..."
                $PM2_PATH start ecosystem.config.mjs --env production 2>&1 || {
                  echo "‚ùå PM2 start with .mjs failed, trying alternative approach..."
                  
                  # Alternative: start directly with script path
                  if [ -f "dist/index.js" ]; then
                    echo "Starting PM2 directly with script path..."
                    $PM2_PATH start dist/index.js --name vendorica-api --instances 2 --env production 2>&1
                  else
                    echo "‚ùå dist/index.js not found"
                    exit 1
                  fi
                }
              else
                echo "‚ùå ecosystem.config.mjs missing"
                exit 1
              fi
              
              $PM2_PATH save
              echo "‚úÖ PM2 process configured"
            else
              echo "‚ö†Ô∏è PM2 not installed - please install PM2 or contact Cloudways support"
              echo "Application built but not running"
            fi

      - name: üèÅ Deployment Summary
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.CLOUDWAYS_HOST }}
          username: ${{ secrets.CLOUDWAYS_USER }}
          key: ${{ secrets.CLOUDWAYS_SSH_KEY }}
          port: ${{ secrets.CLOUDWAYS_PORT }}
          script: |
            cd public_html
            echo "=== DEPLOYMENT SUMMARY ==="
            echo "‚úÖ Repository: Cloned"
            echo "‚úÖ Dependencies: Installed" 
            echo "‚úÖ Build: Completed"
            
            # Production Environment Check
            echo -e "\nüîç Production Environment Check:"
            
            # Check for environment file
            if [ -f ".env.production" ]; then
              echo "‚úÖ .env.production file exists"
              echo "Environment variables:"
              grep -E "^(PORT|NODE_ENV|API_BASE_URL)" .env.production 2>/dev/null || echo "No PORT/NODE_ENV/API_BASE_URL found"
            else
              echo "‚ùå .env.production file missing - this may cause issues!"
              echo "App will use default configuration"
            fi
            
            # Check what port the app is using
            echo -e "\nChecking application port binding..."
            sleep 5  # Give PM2 time to fully start
            
            # Show all listening ports
            echo "All processes listening on ports:"
            netstat -tlnp 2>/dev/null | grep LISTEN
            
            # Check PM2 logs for port information
            echo -e "\nPM2 Application Logs (last 10 lines):"
            
            # Source Cloudways aliases for PM2 status check
            [ -f "$HOME/.bash_aliases" ] && source "$HOME/.bash_aliases"
            
            # Find PM2 for status check
            PM2_PATH=""
            if command -v pm2 > /dev/null 2>&1; then
              PM2_PATH="pm2"
            elif [ -f "$HOME/.npm-global/bin/pm2" ]; then
              PM2_PATH="$HOME/.npm-global/bin/pm2"
            elif [ -f "/usr/local/bin/pm2" ]; then
              PM2_PATH="/usr/local/bin/pm2"
            elif [ -f "$HOME/node_modules/.bin/pm2" ]; then
              PM2_PATH="$HOME/node_modules/.bin/pm2"
            fi
            
            if [ -n "$PM2_PATH" ]; then
              echo "‚úÖ PM2: Configured"
              $PM2_PATH status
              
              # Show recent logs
              echo -e "\nRecent application logs:"
              $PM2_PATH logs vendorica-api --lines 5 --nostream 2>/dev/null || echo "No logs available"
            else
              echo "‚ö†Ô∏è PM2: Not available"
            fi
            
            echo -e "\nüìÅ Deployment path: $(pwd)"
            echo "üöÄ Deployment completed successfully!"